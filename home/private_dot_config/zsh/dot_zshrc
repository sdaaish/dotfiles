# -*- mode: shell-script; -*-

# This file, $ZDOTDIR/.zshrc, is read after the global /etc/zsh/zshrc.
# It will be always read if it is an interactive shell, after .zshenv and possibly .zprofile.

# Here is where all user interactive stuff goes.

# Create directories
COMP_DIR="$XDG_CONFIG_HOME/zsh/completions"
[[ -d $COMP_DIR ]] ||
    mkdir -p $COMP_DIR

# Set up the prompt
autoload -Uz promptinit
promptinit

setopt histignorealldups sharehistory incappendhistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep N lines of history within the shell and save it
HISTSIZE=10000
SAVEHIST=10000
HISTFILE="$XDG_CACHE_HOME/custom/zsh_history"

# Use modern completion system
autoload -Uz compinit
compinit

autoload -Uz colors
colors

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/.zcompcache"

zstyle ':completion:*:*:*:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'

zstyle ':completion:*' group-name ''

zstyle ':completion:*' squeeze-slashes true

#zstyle ':autocomplete:*' delay 0.1  # seconds (float)

source "$XDG_CONFIG_HOME/bash/aliases"
source "$XDG_CONFIG_HOME/zsh/aliases.zsh"

source "$XDG_CONFIG_HOME/bash/functions"
source "$XDG_CONFIG_HOME/zsh/functions.zsh"

source "$XDG_CONFIG_HOME/bash/exports"

# Use plugins
#export ZPLUGIN_DIR="$XDG_CACHE_HOME/zsh/plugins"
add-zsh-plugin "zsh-users/zsh-syntax-highlighting"
add-zsh-plugin "zsh-users/zsh-autosuggestions"
add-zsh-plugin "zsh-users/zsh-history-substring-search"

# Substring search key bindings
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# Chezmoi completion
CHEZMOI_COMP="$XDG_CONFIG_HOME/zsh/completions/chezmoi.zsh"
[[ -r $CHEZMOI_COMP ]] ||
    chezmoi completion zsh --output=$CHEZMOI_COMP
source $CHEZMOI_COMP

# Use LXD/LXC autocomplete
add-zsh-plugin "endaaman/lxd-completion-zsh"

# Use starship as prompt
eval "$(starship init zsh)"

# Use zoxide for navigation
eval "$(zoxide init zsh)"

# Use trigger sequence for FZF
[[ -x "$(command -v fzf)" ]] && source <(fzf --zsh)

# Attach to tmux if running, start it otherwise
if [[ $(pgrep tmux) ]]
then
    if [[ ${TMUX} = "" ]]  # Workaround for when sourcing the .zshrc file
    then
        tmux attach -t 0
    fi
else
    tmux
fi
